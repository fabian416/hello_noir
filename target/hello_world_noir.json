{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":6741125556196958163,"abi":{"parameters":[{"name":"x","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/82YzW7aQBDH1x8EDCEQCC299dL7+nt9o1J5EBNsqZeqrSr10kp5m75LnyMPEqzs2MNoc2JGYiRrze76N3/Pzn5gT72af7pG9t47XYEtO/tI6jxbhy2w5c6W+jKLOVkeYqW6yLKmTJo4jWudVAeT6yw/FCY2cW7yY2LStDGZKatDVeoqztImbvMqbS3M59OlcUx9G9MQjcdbxuQ/xkyPmc0ZpzORIRGM7111Sg3JuXn+/OHH/3972uevLSNb+qg9YAxK5NDLxTc6KyJ1bsz60wgxBfgJ8EMZvh5bzpenc74ifgPSjz6D++xRnz3hztWwYFIOtOGJDs9PTtdCDfdLex8RnkT+YE3c8V879IOvmX3X3+Rd8fh4bFrKoyvX+PiFAf5IRn8/V25k9JfAH4vw0xr4Exn9FfAjmfgfgD+ViU8/vjMZ/f343srwM+DPZfj9XnQnkz+9/oUMv8+fpUz+9PG5F+Enj8BfycQnB/5aJn96/oOM/gb4G5n4J3B+eKcGg30VfL9H9Xz7eFK4ztsBqcP+p0Qr97naI/5AD40PnDUgdluH1qWjje4hW4efrcOPi7VhZC0YWRNG1gMj646RxRn78ZXqWjOyOMdxzsjizNUbRhZnvFaMLM45dK3rxC0jizP2nPnFqWvEyOJcv+6vVNeMkcU5hzjnNuccChlZ17pvLxlZU0YWnMVd39A629lSX2igNXRodZ27u/yCdef7z6/ffiliGOQhwfDbJ23Q/xPpF7zBo31cPjwHr7NuAYA/AuHTOWdn6/UFVprXgHYWWP5IDe+CLUTtuP8f+xsnE5ThBTrbso7btG7rvD4es8d6Rfid4Q+5LyALzvZWHAAA","debug_symbols":"ldjNasJAFEDhd5l1FpmfO3Mnr1JEokYJhERiLBTJuzcpWizaxdkIY+6ZEL7dvZlDs7uetm1/HC6m+riZbtjXUzv0y+lm3M9fl3Pdr6fLVI+TqUIqTNMfTCVuLsyx7RpTRTtvCuPZeHg3LnofT/55vHgZzBLvk1n1d9TlebMcdmPbde1p++dryvXHpndv/f+ywljFRaaFK3FhceFw4XERcCG4iLjA5g6bO2zusbnH5h6be2zusbnH5h6be2zusbnH5gGbB2wesHnA5gGbB2wesHnA5gGbB2wu2FywuWBzweaCzQWbCzYXbC7YXLB5xOYRm0dsHrF5xOYRm0dsHrF5xOYRmydsnrB5wuYJmydsnrB5wuYJmydsnrC5YnPF5orNFZsrNldsrthcsblic8XmGZtnbJ6xecbmGZtnbJ6xecbmGZtnbG7LkieWJ44nnieBJ8KTyBO+myn5cqbk+pbrW65vub7l+pbr27f6at090SAvSeRJYsm8nD7rsa13XbPu99aH137/WPctx+nr/HjyWAiex2HfHK5js64Gn7aCK7C1ubAuLBcvl38D","file_map":{"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"fn main(x: u32, y: pub u32) {\n    let result = x + y;\n    println(result);\n    assert(result >= 0)\n}\n\n#[test]\nfn test_main() { \n    main(1,2);\n}","path":"/Users/fabiandiaz/personal-repos/hello_world_noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained"]}